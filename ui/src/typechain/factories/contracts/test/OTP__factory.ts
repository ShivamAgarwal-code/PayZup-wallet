/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  OTP,
  OTPInterface,
} from "../../../contracts/test/OTP";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "merkleRoot",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2]",
        name: "input",
        type: "uint256[2]",
      },
    ],
    name: "blockApproval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dummy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lastUsedTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "a",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2]",
        name: "input",
        type: "uint256[2]",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "naiveApproval",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "root",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifierAddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405260008055600060015534801561001957600080fd5b50604051610c1a380380610c1a8339810160408190526100389161004e565b6001600160a01b0390911660805260a052610088565b6000806040838503121561006157600080fd5b82516001600160a01b038116811461007857600080fd5b6020939093015192949293505050565b60805160a051610b526100c8600039600081816101490152818161027e015261051101526000818160c70152818161017101526104090152610b526000f3fe6080604052600436106100655760003560e01c8063bf98a6e411610043578063bf98a6e41461010e578063cdf62e2114610124578063ebf0c7171461013757600080fd5b806315eacf131461006a57806332e43a111461008c578063663ea2e2146100b5575b600080fd5b34801561007657600080fd5b5061008a6100853660046108c2565b61016b565b005b34801561009857600080fd5b506100a260015481565b6040519081526020015b60405180910390f35b3480156100c157600080fd5b506100e97f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ac565b34801561011a57600080fd5b506100a260005481565b61008a61013236600461091c565b610403565b34801561014357600080fd5b506100a27f000000000000000000000000000000000000000000000000000000000000000081565b838383837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5c9d69e858585856040518563ffffffff1660e01b81526004016101ce94939291906109ce565b602060405180830381865afa1580156101eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020f9190610a59565b61027a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f696e76616c69642070726f6f660000000000000000000000000000000000000060448201526064015b60405180910390fd5b80517f000000000000000000000000000000000000000000000000000000000000000014610304576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f696e76616c696420726f6f7400000000000000000000000000000000000000006044820152606401610271565b600054602082015111610373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f6f6c64204f5450000000000000000000000000000000000000000000000000006044820152606401610271565b602085015142106103e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f6f6c64204f5450000000000000000000000000000000000000000000000000006044820152606401610271565b6001600081546103ef90610a82565b909155506020015160005550505050505050565b848484847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5c9d69e858585856040518563ffffffff1660e01b815260040161046694939291906109ce565b602060405180830381865afa158015610483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a79190610a59565b61050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f696e76616c69642070726f6f66000000000000000000000000000000000000006044820152606401610271565b80517f000000000000000000000000000000000000000000000000000000000000000014610597576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f696e76616c696420726f6f7400000000000000000000000000000000000000006044820152606401610271565b600054602082015111610606576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f6f6c64204f5450000000000000000000000000000000000000000000000000006044820152606401610271565b60016000815461061590610a82565b909155506106238534610634565b602001516000555050505050505050565b804710156106c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f53747265616d696e673a3a736166655472616e736665724554483a20496e737560448201527f6666696369656e7420616d6f756e7400000000000000000000000000000000006064820152608401610271565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040516106fb9190610ae1565b60006040518083038185875af1925050503d8060008114610738576040519150601f19603f3d011682016040523d82523d6000602084013e61073d565b606091505b50509050806107ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f53747265616d696e673a3a736166655472616e736665724554483a204554482060448201527f7472616e73666572206661696c656400000000000000000000000000000000006064820152608401610271565b505050565b6040805190810167ffffffffffffffff8111828210171561081d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b600082601f83011261083457600080fd5b61083c6107d3565b80604084018581111561084e57600080fd5b845b81811015610868578035845260209384019301610850565b509095945050505050565b600082601f83011261088457600080fd5b61088c6107d3565b80608084018581111561089e57600080fd5b845b81811015610868576108b28782610823565b84526020909301926040016108a0565b60008060008061014085870312156108d957600080fd5b6108e38686610823565b93506108f28660408701610873565b92506109018660c08701610823565b9150610911866101008701610823565b905092959194509250565b6000806000806000610160868803121561093557600080fd5b61093f8787610823565b945061094e8760408801610873565b935061095d8760c08801610823565b925061096d876101008801610823565b915061014086013573ffffffffffffffffffffffffffffffffffffffff8116811461099757600080fd5b809150509295509295909350565b8060005b60028110156109c85781518452602093840193909101906001016109a9565b50505050565b61014081016109dd82876109a5565b6040808301866000805b60028082106109f65750610a30565b835185845b83811015610a195782518252602092830192909101906001016109fb565b5050509385019350602092909201916001016109e7565b5050505050610a4260c08301856109a5565b610a506101008301846109a5565b95945050505050565b600060208284031215610a6b57600080fd5b81518015158114610a7b57600080fd5b9392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ada577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b6000825160005b81811015610b025760208186018101518583015201610ae8565b81811115610b11576000828501525b50919091019291505056fea2646970667358221220956c7e3084cb3034fcf1ff98bcbd77009912f7cd1e2f437bc8e5a47c5372dce064736f6c634300080f0033";

type OTPConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OTPConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OTP__factory extends ContractFactory {
  constructor(...args: OTPConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _verifier: PromiseOrValue<string>,
    merkleRoot: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OTP> {
    return super.deploy(_verifier, merkleRoot, overrides || {}) as Promise<OTP>;
  }
  override getDeployTransaction(
    _verifier: PromiseOrValue<string>,
    merkleRoot: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_verifier, merkleRoot, overrides || {});
  }
  override attach(address: string): OTP {
    return super.attach(address) as OTP;
  }
  override connect(signer: Signer): OTP__factory {
    return super.connect(signer) as OTP__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OTPInterface {
    return new utils.Interface(_abi) as OTPInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): OTP {
    return new Contract(address, _abi, signerOrProvider) as OTP;
  }
}
